/**
 * KieAI SDK Nano Banana API 单元测试
 * 
 * 测试Nano Banana相关的API调用功能
 */

import { describe, it, expect, beforeEach, vi } from 'vitest'

// 模拟KieAI类
const mockKieAI = {
  createNanoBananaTask: vi.fn(),
  createNanoBananaEditTask: vi.fn(),
  queryNanoBananaTask: vi.fn(),
}

// 模拟fetch函数
const mockFetch = vi.fn()
global.fetch = mockFetch as any

describe('KieAI Nano Banana API', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    mockFetch.mockClear()
  })

  describe('createNanoBananaTask', () => {
    it('应该正确创建Text-to-Image任务', async () => {
      const expectedResponse = {
        code: 0,
        msg: '成功',
        data: {
          taskId: 'nano-banana-12345',
          status: 'waiting'
        }
      }\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(expectedResponse)\n      })\n\n      // 模拟API调用\n      const options = {\n        prompt: '生成一张美丽的风景图',\n        callBackUrl: 'https://example.com/callback'\n      }\n\n      mockKieAI.createNanoBananaTask.mockResolvedValue(expectedResponse.data)\n\n      const result = await mockKieAI.createNanoBananaTask(options)\n\n      expect(result).toEqual(expectedResponse.data)\n      expect(mockKieAI.createNanoBananaTask).toHaveBeenCalledWith(options)\n    })\n\n    it('应该正确处理API调用失败', async () => {\n      const errorResponse = {\n        code: 400,\n        msg: '参数错误',\n        data: null\n      }\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: () => Promise.resolve(errorResponse)\n      })\n\n      mockKieAI.createNanoBananaTask.mockRejectedValue(new Error('参数错误'))\n\n      await expect(mockKieAI.createNanoBananaTask({\n        prompt: ''\n      })).rejects.toThrow('参数错误')\n    })\n  })\n\n  describe('createNanoBananaEditTask', () => {\n    it('应该正确创建Image-to-Image任务', async () => {\n      const expectedResponse = {\n        code: 0,\n        msg: '成功',\n        data: {\n          taskId: 'nano-banana-edit-12345',\n          status: 'waiting'\n        }\n      }\n\n      mockKieAI.createNanoBananaEditTask.mockResolvedValue(expectedResponse.data)\n\n      const options = {\n        prompt: '修改这张图片的颜色',\n        inputImage: 'https://example.com/input.jpg',\n        callBackUrl: 'https://example.com/callback'\n      }\n\n      const result = await mockKieAI.createNanoBananaEditTask(options)\n\n      expect(result).toEqual(expectedResponse.data)\n      expect(mockKieAI.createNanoBananaEditTask).toHaveBeenCalledWith(options)\n    })\n\n    it('应该要求必需的inputImage参数', async () => {\n      mockKieAI.createNanoBananaEditTask.mockRejectedValue(\n        new Error('Image-to-Image模式需要提供输入图片')\n      )\n\n      await expect(mockKieAI.createNanoBananaEditTask({\n        prompt: '修改图片'\n        // 缺少inputImage\n      })).rejects.toThrow('Image-to-Image模式需要提供输入图片')\n    })\n  })\n\n  describe('queryNanoBananaTask', () => {\n    it('应该正确查询任务状态', async () => {\n      const taskResponse = {\n        code: 0,\n        msg: '成功',\n        data: {\n          taskId: 'nano-banana-12345',\n          status: 'success',\n          resultUrls: ['https://example.com/result1.jpg'],\n          createTime: '2024-01-01T00:00:00Z',\n          completeTime: '2024-01-01T00:01:00Z'\n        }\n      }\n\n      mockKieAI.queryNanoBananaTask.mockResolvedValue(taskResponse.data)\n\n      const result = await mockKieAI.queryNanoBananaTask('nano-banana-12345')\n\n      expect(result).toEqual(taskResponse.data)\n      expect(mockKieAI.queryNanoBananaTask).toHaveBeenCalledWith('nano-banana-12345')\n    })\n\n    it('应该处理任务不存在的情况', async () => {\n      mockKieAI.queryNanoBananaTask.mockRejectedValue(\n        new Error('任务不存在')\n      )\n\n      await expect(mockKieAI.queryNanoBananaTask('non-existent-task'))\n        .rejects.toThrow('任务不存在')\n    })\n\n    it('应该正确处理不同的任务状态', async () => {\n      const statuses = ['waiting', 'queuing', 'generating', 'success', 'fail']\n      \n      for (const status of statuses) {\n        const taskResponse = {\n          taskId: `task-${status}`,\n          status,\n          resultUrls: status === 'success' ? ['https://example.com/result.jpg'] : null\n        }\n\n        mockKieAI.queryNanoBananaTask.mockResolvedValueOnce(taskResponse)\n\n        const result = await mockKieAI.queryNanoBananaTask(`task-${status}`)\n        expect(result.status).toBe(status)\n      }\n    })\n  })\n\n  describe('参数验证', () => {\n    it('应该验证prompt参数', async () => {\n      mockKieAI.createNanoBananaTask.mockImplementation((options) => {\n        if (!options.prompt || options.prompt.trim() === '') {\n          throw new Error('提示词不能为空')\n        }\n        return Promise.resolve({ taskId: 'test', status: 'waiting' })\n      })\n\n      await expect(mockKieAI.createNanoBananaTask({\n        prompt: ''\n      })).rejects.toThrow('提示词不能为空')\n\n      await expect(mockKieAI.createNanoBananaTask({\n        prompt: '   '\n      })).rejects.toThrow('提示词不能为空')\n    })\n\n    it('应该验证taskId参数', async () => {\n      mockKieAI.queryNanoBananaTask.mockImplementation((taskId) => {\n        if (!taskId || typeof taskId !== 'string') {\n          throw new Error('无效的任务ID')\n        }\n        return Promise.resolve({ taskId, status: 'waiting' })\n      })\n\n      await expect(mockKieAI.queryNanoBananaTask(''))\n        .rejects.toThrow('无效的任务ID')\n\n      await expect(mockKieAI.queryNanoBananaTask(null as any))\n        .rejects.toThrow('无效的任务ID')\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该正确处理网络错误', async () => {\n      mockKieAI.createNanoBananaTask.mockRejectedValue(\n        new Error('Network Error: fetch failed')\n      )\n\n      await expect(mockKieAI.createNanoBananaTask({\n        prompt: '测试提示词'\n      })).rejects.toThrow('Network Error: fetch failed')\n    })\n\n    it('应该正确处理API响应错误', async () => {\n      const errorResponses = [\n        { code: 400, msg: '参数错误' },\n        { code: 401, msg: '未授权' },\n        { code: 429, msg: '请求频率过高' },\n        { code: 500, msg: '内部服务器错误' }\n      ]\n\n      for (const errorResponse of errorResponses) {\n        mockKieAI.createNanoBananaTask.mockRejectedValueOnce(\n          new Error(errorResponse.msg)\n        )\n\n        await expect(mockKieAI.createNanoBananaTask({\n          prompt: '测试提示词'\n        })).rejects.toThrow(errorResponse.msg)\n      }\n    })\n\n    it('应该正确处理超时错误', async () => {\n      mockKieAI.queryNanoBananaTask.mockRejectedValue(\n        new Error('Request timeout')\n      )\n\n      await expect(mockKieAI.queryNanoBananaTask('timeout-task'))\n        .rejects.toThrow('Request timeout')\n    })\n  })\n\n  describe('回调URL处理', () => {\n    it('应该正确设置回调URL', async () => {\n      const callBackUrl = 'https://example.com/webhook/nano-banana'\n      \n      mockKieAI.createNanoBananaTask.mockImplementation((options) => {\n        expect(options.callBackUrl).toBe(callBackUrl)\n        return Promise.resolve({ taskId: 'test', status: 'waiting' })\n      })\n\n      await mockKieAI.createNanoBananaTask({\n        prompt: '测试提示词',\n        callBackUrl\n      })\n\n      expect(mockKieAI.createNanoBananaTask).toHaveBeenCalledWith({\n        prompt: '测试提示词',\n        callBackUrl\n      })\n    })\n  })\n})